{
  "hash": "b5cfa7c3c1717162c84ab4583016a250",
  "result": {
    "engine": "knitr",
    "markdown": "---\ncode-fold: true\n---\n\n\n# Criação de gráficos com o `ggplot2` {#sec-graphics}\n\n\n::: {.cell}\n\n:::\n\n\n\n## Carregando o Dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://raw.githubusercontent.com/raymz1990/CE307-Projeto-Extensao/refs/heads/main/data/serie_a_2010_2024.csv\"\ndados <- read.csv(file = url,\n                  header = TRUE,     \n                  sep = \",\",          \n                  # quote = \"\",      \n                  stringsAsFactors = FALSE)\n```\n:::\n\n\n## Histogramas\n\nO **Histograma** exibe a frequência com que diferentes intervalos de valores (conhecidos como \"bins\") ocorrem em um conjunto de dados. Cada barra do histograma representa a quantidade de dados que se enquadra em um determinado intervalo, com barras mais altas indicando maior ocorrência de valores naquela faixa.\n\n### Utilidade:\n- **Verificação da qualidade dos dados**: Histograma ajuda a identificar se há concentrações inesperadas ou valores atípicos (outliers) em certas faixas de dados.\n- **Comparação de distribuições entre grupos**: Comparar como diferentes grupos (por exemplo, times, rodadas) se distribuem em termos de variáveis como gols ou público.\n\n### Exemplo de Aplicação:\nAo gerar um histograma para o número de gols marcados por rodada, você pode visualizar quantas vezes um time marcou dentro de um intervalo de valores, como entre 0 e 5 gols, permitindo identificar a frequência dos resultados mais comuns.\n\n---\n\nAgora, vou criar um histograma para ilustrar esse conceito.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Carregando biblioteca\nlibrary(ggplot2)\nlibrary(tidyverse)\nFALSE ── Attaching core tidyverse packages ───────────────────── tidyverse 2.0.0 ──\nFALSE ✔ dplyr     1.1.3     ✔ readr     2.1.4\nFALSE ✔ forcats   1.0.0     ✔ stringr   1.5.1\nFALSE ✔ lubridate 1.9.3     ✔ tibble    3.2.1\nFALSE ✔ purrr     1.0.2     ✔ tidyr     1.3.0\nFALSE ── Conflicts ─────────────────────────────────────── tidyverse_conflicts() ──\nFALSE ✖ dplyr::filter() masks stats::filter()\nFALSE ✖ dplyr::lag()    masks stats::lag()\nFALSE ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\n# dados do histograma\nhistograma <- dados %>%\n  filter(ano_campeonato == 2023) %>%\n  group_by(rodada) %>%\n  summarize(\n    gols_mandante = sum(gols_mandante, na.rm = TRUE)\n  )\n\n# Gerando o histograma\nggplot(histograma, aes(x = gols_mandante)) +\n  geom_histogram(binwidth = 1, fill = \"blue\", color = \"black\") +\n  labs(title = \"Distribuição dos Gols Mandantes no Campeonato de 2023\", \n       x = \"Gols Mandantes\", \n       y = \"Frequência\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](02_graphics_files/figure-html/unnamed-chunk-3-1.png){width=576}\n:::\n:::\n\n\n---\n\n## Boxplots\n\nO **Boxplot** exibe a distribuição dos dados com base em um resumo de cinco números. Ele fornece uma visão visual da tendência central dos dados, sua variabilidade e possíveis outliers. Cada boxplot é construído a partir de cinco valores: **mínimo**, **primeiro quartil (Q1)**, **mediana (Q2)**, **terceiro quartil (Q3)**, e **máximo**. As \"wiskers\" (ou extremidades do gráfico) mostram a extensão da variabilidade dos dados, sem incluir os outliers.\n\n### Resumo de cinco números:\n- **Mínimo**: O menor valor dos dados (desconsiderando outliers).\n- **Primeiro Quartil (Q1)**: O ponto abaixo do qual 25% dos dados estão localizados.\n- **Mediana (Q2)**: O valor central dos dados (50% dos dados estão abaixo e 50% acima).\n- **Terceiro Quartil (Q3)**: O ponto abaixo do qual 75% dos dados estão localizados.\n- **Máximo**: O maior valor dos dados (desconsiderando outliers).\n  \nAs \"wiskers\" (linhas verticais) mostram o alcance dos dados, enquanto os pontos fora das wiskers são considerados outliers.\n\n### Utilidade:\n- **Identificação de outliers**: Boxplots são ótimos para identificar valores que estão muito distantes da maioria dos dados.\n- **Distribuição de dados**: É possível ver a dispersão dos dados e a presença de qualquer assimetria (skewness) no conjunto de dados.\n\n### Exemplo de Aplicação:\nAo gerar um boxplot para o número de gols marcados pelos times, você pode identificar times que têm uma variação de desempenho alta ou jogos com números de gols fora do padrão.\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Carregando biblioteca\nlibrary(ggplot2)\nlibrary(tidyverse)\n\n# Criando o dataframe\nboxplot <- dados %>%\n  filter(time_mandante %in% c(\"Coritiba FC\", \"Athletico-PR\", \"Paraná\")) \n\n# Gerar o boxplot\nggplot(boxplot, aes(x = time_mandante, y = publico)) +\n  geom_boxplot() +\n  # geom_boxplot(fill = \"lightblue\", color = \"black\") +\n  labs(title = \"Boxplot do Público por Time\", x = \"Time Mandante\", y = \"Público\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](02_graphics_files/figure-html/unnamed-chunk-4-1.png){width=576}\n:::\n:::\n\n\n## Gráfico Scatterplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(tidyverse)\n\ndados_rodada <- dados %>% \n  group_by(rodada) %>%\n  summarize(media=mean(gols_mandante, na.rm = TRUE))\n\ndados_time <- dados %>% \n  group_by(rodada, time_mandante) %>%\n  summarize(media=mean(gols_mandante, na.rm = TRUE))\nFALSE `summarise()` has grouped output by 'rodada'. You can override using the\nFALSE `.groups` argument.\n\ndados_rodada %>% \n  ggplot(aes(x=rodada,y=media))+\n  geom_point()\n\ndados_time %>% \n  ggplot(aes(x=rodada,y=media))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](02_graphics_files/figure-html/unnamed-chunk-5-1.png){width=576}\n:::\n\n::: {.cell-output-display}\n![](02_graphics_files/figure-html/unnamed-chunk-5-2.png){width=576}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndados_rodada %>% \n  ggplot(aes(x=rodada,y=media))+\n  geom_point(col=\"red\")+\n  theme_bw()\n\ndados_time %>% \n  ggplot(aes(x=rodada,y=media,col=time_mandante))+\n  geom_point()+\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](02_graphics_files/figure-html/unnamed-chunk-6-1.png){width=576}\n:::\n\n::: {.cell-output-display}\n![](02_graphics_files/figure-html/unnamed-chunk-6-2.png){width=576}\n:::\n:::\n\n\n## Passo 1: Definir a Pontuação de Mandantes e Visitantes\nPrimeiro, calcularemos a pontuação para o time mandante e o time visitante de acordo com o resultado da partida.\n\n### 1.1 Adicionar Pontuação dos Mandantes e Visitantes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adicionar a pontuação para o time mandante e visitante\ndados_pontos <- dados %>%\n  mutate(\n    pontos_mandante = case_when(\n      gols_mandante > gols_visitante ~ 3,  # Vitória do mandante\n      gols_mandante == gols_visitante ~ 1, # Empate\n      TRUE ~ 0                             # Derrota do mandante\n    ),\n    pontos_visitante = case_when(\n      gols_visitante > gols_mandante ~ 3,  # Vitória do visitante\n      gols_visitante == gols_mandante ~ 1, # Empate\n      TRUE ~ 0                             # Derrota do visitante\n    )\n  )\n```\n:::\n\n\n## Passo 2: Criar a Tabela de Pontuação dos Times\nAgora que temos a pontuação de cada partida, podemos calcular a pontuação total para cada time, considerando tanto as partidas como mandante quanto como visitante.\n\n### 2.1 Unir as Pontuações de Mandante e Visitante\nVamos criar uma tabela única que combine as pontuações de times mandantes e visitantes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criar uma tabela com a pontuação dos times como mandante\npontos_mandante <- dados_pontos %>%\n  group_by(time_mandante) %>%\n  summarise(\n    pontos_mandante = sum(pontos_mandante),\n    jogos_mandante = n()\n  ) %>%\n  rename(time = time_mandante)\n\n# Criar uma tabela com a pontuação dos times como visitante\npontos_visitante <- dados_pontos %>%\n  group_by(time_visitante) %>%\n  summarise(\n    pontos_visitante = sum(pontos_visitante),\n    jogos_visitante = n()\n  ) %>%\n  rename(time = time_visitante)\n\n# Unir as tabelas de pontuação de mandante e visitante\npontuacao_total <- pontos_mandante %>%\n  full_join(pontos_visitante, by = \"time\") %>%\n  mutate(\n    pontos_totais = pontos_mandante + pontos_visitante,\n    jogos_totais = jogos_mandante + jogos_visitante\n  ) %>%\n  arrange(pontos_totais)\n\n# Visualizar a tabela de pontuação total\nprint(pontuacao_total)\nFALSE # A tibble: 41 × 7\nFALSE   time         pontos_mandante jogos_mandante pontos_visitante\nFALSE   <chr>                  <dbl>          <int>            <dbl>\nFALSE 1 Paraná                    19             19                4\nFALSE 2 Barueri                   20             19               11\nFALSE 3 Joinville-SC              25             19                6\nFALSE 4 Santa Cruz                23             19                8\nFALSE 5 CSA                       23             19                9\nFALSE 6 Guarani                   30             19                7\nFALSE # ℹ 35 more rows\nFALSE # ℹ 3 more variables: jogos_visitante <int>, pontos_totais <dbl>, …\n```\n:::\n\n\n## Passo 3: Exibir o Gráfico de Pontuação dos Times\n### Agora podemos criar um gráfico de barras mostrando a pontuação total de cada time.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criar gráfico de barras da pontuação total dos times\nggplot(pontuacao_total, aes(x = reorder(time, pontos_totais), y = pontos_totais)) +\n  geom_bar(stat = \"identity\", fill = \"blue\") +\n  coord_flip() +\n  labs(title = \"Pontuação Total dos Times\", x = \"Time\", y = \"Pontuação Total\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](02_graphics_files/figure-html/unnamed-chunk-9-1.png){width=576}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Definir as cores para os times específicos\ncores_times <- c(\"Paraná\" = \"#0033A0\",   \n                 \"Coritiba FC\" = \"#008000\",  \n                 \"Athletico-PR\" = \"#FF0000\")  \n\n# Criar gráfico de barras com cores personalizadas para Paraná, Coritiba e Athletico-PR\nggplot(pontuacao_total, aes(x = reorder(time, pontos_totais), y = pontos_totais, fill = time)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = cores_times, na.value = \"grey\") +  # Coloca cinza para times não especificados\n  coord_flip() +\n  labs(title = \"Pontuação Total dos Times\", x = \"Time\", y = \"Pontuação Total\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](02_graphics_files/figure-html/unnamed-chunk-10-1.png){width=576}\n:::\n:::\n\n\n\n# gráfico animado\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrequire(datasauRus)\n#> Carregando pacotes exigidos: datasauRus\nrequire(ggplot2)\nrequire(dplyr)\nrequire(gganimate)\n#> Carregando pacotes exigidos: gganimate\n\n\nnf=8\ndatasaurus_dozen2 <- \n  datasaurus_dozen %>%  group_by(dataset) %>% \n  mutate(x.m  =format(mean(x), nsmall = nf),\n         x.s  =format(sd(x),   nsmall = nf),\n         y.m  =format(mean(y), nsmall = nf),\n         y.s  =format(sd(y),   nsmall = nf),\n         corr =format(cor(x,y),nsmall = nf))\n\n\ndatasaurus_dozen2 %>% \n  #filter(dataset==\"dino\") %>% \n  ggplot(aes(x=x, y=y,label=\n               paste0(\"x.m : \",x.m, \"\\n\",\n                      \"x.s : \",x.s, \"\\n\",\n                      \"y.m : \",y.m, \"\\n\",\n                      \"y.s : \",y.s, \"\\n\",\n                      \"cor : \",corr)))+\n  geom_point(size=3,col=\"#00897b\",alpha=0.5)+\n  geom_text(aes(x=110,y=110),family=\"mono\",size=6,col=\"gray\")+\n  xlim(5,130)+\n  ylim(0,125)+\n  transition_states(dataset)+\n  labs(title = \"Conjunto: {closest_state}\")+\n  annotate(\"text\",x=48,y=124,label=\"  Visualização de Dados Aplicada -UFPR\",\n           size=6,col=\"#00897b\",face=\"bold\")+\n  theme_bw()+\n  theme(legend.position = \"none\")+\n  theme(plot.title = element_text(size=16,face = \"bold\"))\n#> Warning in annotate(\"text\", x = 48, y = 124, label = \" Visualização de Dados\n#> Aplicada -UFPR\", : Ignoring unknown parameters: `face`\n```\n\n::: {.cell-output-display}\n![](02_graphics_files/figure-html/unnamed-chunk-11-1.gif){fig-align='center'}\n:::\n:::\n\n\n1. Instalar os pacotes necessários\nSe você ainda não tiver o pacote gganimate, instale-o:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"gganimate\")\ninstall.packages(\"transformr\")\n```\n:::\n\n\n2. Preparar os dados\n\nVocê precisa somar os gols para cada time mandandte ao longo das rodadas e criar uma coluna cumulativa que contabilize a evolução dos gols marcados ao longo do tempo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\n# Agrupar e calcular a soma dos gols por ano e time mandante\ndados_gols <- dados %>%\n  group_by(ano_campeonato, time_mandante) %>%\n  summarise(gols_mandante = sum(gols_mandante, na.rm = TRUE)) %>%\n  arrange(ano_campeonato)\nFALSE `summarise()` has grouped output by 'ano_campeonato'. You can override using\nFALSE the `.groups` argument.\n\n# Criar uma pontuação cumulativa para acompanhar a evolução dos gols por time\ndados_gols <- dados_gols %>%\n  group_by(time_mandante) %>%\n  mutate(gols_acumulados = cumsum(gols_mandante)) %>%\n  ungroup()\n\n# Agrupar por ano e criar a classificação dos 10 primeiros\ndados_gols <- dados_gols %>%\n  group_by(ano_campeonato) %>%\n  mutate(rank = rank(-gols_acumulados, ties.method = \"first\"),  \n         gols_rel = gols_acumulados / max(gols_acumulados)) %>% \n  filter(rank <= 10) %>%  \n  ungroup()\n```\n:::\n\n\n3. Criar o gráfico animado com gganimate\n\nAgora, vamos criar o gráfico de barras animado que mostra a evolução rodada por rodada dos 10 maiores goleadores.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gganimate)\n\ngrafico_animado <-\n  ggplot(\n    dados_gols,\n    aes(\n      x = rank,\n      y = gols_acumulados,\n      group = time_mandante,\n      fill = time_mandante\n    )\n  ) +\n  geom_col(width = 0.8, color = \"black\") +\n  theme_minimal() +\n  geom_text(aes(y = 0, label = paste(time_mandante, \" \")), vjust = 0.2, hjust = 1) +\n  geom_text(aes(y = gols_acumulados, label = round(gols_acumulados, 1), hjust = -0.1)) +\n  coord_flip(clip = \"off\", expand = FALSE) +\n  scale_x_reverse() +\n  guides(color = FALSE, fill = FALSE) +\n  theme(\n    axis.title.y = element_blank(),\n    legend.position = \"none\",\n    plot.title = element_text(size = 20, hjust = 0, face = \"bold\"),\n    plot.background = element_blank(),\n    plot.margin = margin(0, 2, 0, 3, \"cm\")\n  ) +\n  labs(title = '{closest_state}', x = \" \", y = \"Gols Acumulados\") + \n  transition_states(ano_campeonato, transition_length = 16, state_length = 4) +\n  view_follow(fixed_x = TRUE)\n\n# Rodar a animação\nanimate(grafico_animado, nframes = 300, fps = 20)\n```\n:::\n\n\n4. Salvar a animação \nVocê pode salvar a animação em formato de vídeo ou GIF:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanim_save(\"topscore_animados.gif\", animation = grafico_animado)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](topscore_animados.gif)\n:::\n:::",
    "supporting": [
      "02_graphics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}